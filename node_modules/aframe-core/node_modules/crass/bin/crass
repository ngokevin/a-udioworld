#!/usr/bin/env node

function help() {
    console.log([
        'Usage:',
        '  crass <input file> [options]',
        '',
        'Options:',
        ' --optimize        Run optimizations on the file.',
        ' --O1              Runs optimizations with the O1 flag.',
        ' --pretty          Pretty prints the output.',
        ' --min xxx[[,xxx]] Sets browser minimum versions.',
        '',
        'Browser versions:',
        ' - Must start with browser name',
        ' - Followed by version',
        ' - E.g.: chr28 ie9 fx16 op15'
    ].join('\n'));
}

if (process.argv.length < 3) {
    help();
    process.exit(1);
}

var fs = require('fs');

var browser_support = require('../lib/browser_support');
var utils = require('../lib/utils');
var opts = utils.opts(process.argv.slice(3));

var crass = require('../crass');
fs.readFile(process.argv[2], function(err, data) {
    if (err) {
        console.error('Could not read file.');
        console.error(err);
        help();
        process.exit(1);
    }

    var parsed = crass.parse(data);

    var kw = {};
    if ('min' in opts) {
        var min_plats = opts.min.split(',').map(browser_support.parseBrowser);
        kw.browser_min = {};
        min_plats.forEach(function(plat) {
            kw.browser_min[plat.browser] = plat.version;
        });
    }

    if (opts.optimize) {
        if (opts.o1 || opts.O1) kw.O1 = true;
        if (opts.saveie) kw.saveie = true;
        parsed = parsed.optimize(kw);
    }

    if (opts.pretty) {
        console.log(parsed.pretty());
    } else {
        console.log(parsed.toString());
    }
});
