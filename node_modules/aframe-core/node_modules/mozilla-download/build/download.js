"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

module.exports = download;

var debug = _interopRequire(require("debug"));

var fs = _interopRequire(require("fs"));

var throttle = require("lodash").throttle;

var request = _interopRequire(require("request"));

var tempfile = require("./temp").tempfile;

debug = debug("mozilla-download/download");

function download(url, options) {
  var path, get, stream;
  return regeneratorRuntime.async(function download$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return tempfile({ prefix: "mozilla-download-" + options.os });

      case 2:
        path = context$1$0.sent;

        debug("Will open http connection, download to", path);
        get = request.get(url);
        stream = fs.createWriteStream(path);
        context$1$0.next = 8;
        return pipeResponseToStream(get, stream);

      case 8:
        return context$1$0.abrupt("return", path);

      case 9:
      case "end":
        return context$1$0.stop();
    }
  }, null, this);
}

function pipeResponseToStream(req, stream) {
  return new Promise(function (accept, reject) {
    req.on("error", reject);
    stream.on("error", reject);
    req.pipe(stream);
    var ondata = throttle(function () {
      return process.stdout.write(".");
    }, 1000);
    req.on("data", ondata);
    stream.on("finish", function () {
      req.removeListener("data", ondata);
      process.stdout.write("\n");
      accept();
    });
  });
}
//# sourceMappingURL=download.js.map