{"version":3,"sources":["../src/detecturl.js"],"names":[],"mappings":";;;;;;;;;;;;;;;iBAe8B,SAAS;;IAfhC,WAAW,2BAAM,oBAAoB;;IACnC,MAAM,WAAQ,KAAK,EAAnB,MAAM;;IACH,SAAS,mCAAM,kBAAkB;;AAE7C,IAAM,cAAc,GAAG,EAAE,OAAO,EAAE,EAAE,GAAG,IAAI,EAAE,CAAC;AAW/B,SAAe,SAAS,CAAC,OAAO;MAEzC,OAAO,EACP,SAAS,EAET,EAAE,EAGF,KAAK,EACL,IAAI,EAGJ,KAAK,QACH,SAAS,EAGX,EAAE,EACF,OAAO,EACP,MAAM,EAKN,QAAQ;;;;;AArBR,eAAO,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC;AAClD,iBAAS,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;;AAC5C,eAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACpB,UAAE,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AAGtB,aAAK,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,cAAc,CAAC;;eAChC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;;;AAA/B,YAAI;AAGJ,aAAK,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,cAAc,CAAC;;eACvB,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC;;;;AAA1D,iBAAS,QAAT,SAAS;AAGX,UAAE,GAAG,OAAO,CAAC,EAAE;AACf,eAAO,GAAG,OAAO,CAAC,OAAO;AACzB,cAAM,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,GAC/B,OAAO,CAAC,UAAU,GAClB,SAAS,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,CAAC;AAGtC,gBAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,UAAA,GAAG;iBAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAAA,CAAC;;YAChE,QAAQ;;;;;4CACJ,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;;;4CAKlE,MAAM,CAAC;AACZ,kBAAQ,EAAE,OAAO;AACjB,cAAI,EAAE,uBAAuB;AAC7B,kBAAQ,EAAE,WAAW,GAAG,IAAI,CAAC,MAAM,GAAG,aAAa,GAAG,QAAQ,CAAC,IAAI;SACpE,CAAC;;;;;;;CACH","file":"src/detecturl.js","sourcesContent":["import taskcluster from 'taskcluster-client';\nimport { format } from 'url';\nimport * as buildinfo from './moz_build_info';\n\nconst TC_CLIENT_OPTS = { timeout: 30 * 1000 };\n\n/**\n * Options:\n *\n *   (String) product\n *   (String) os\n *   (String) branch\n *   (String) revision\n *   (String) fileSuffix\n */\nexport default async function detectURL(options) {\n  // Figure out the appropriate index namespace.\n  let nsparts = ['buildbot', 'branches', options.branch];\n  let buildname = buildinfo.buildname(options);\n  nsparts.push(buildname);\n  let ns = nsparts.join('.');\n\n  // Find task in namespace.\n  let index = new taskcluster.Index(TC_CLIENT_OPTS);\n  let task = await index.findTask(ns);\n\n  // List task artifacts.\n  let queue = new taskcluster.Queue(TC_CLIENT_OPTS);\n  let { artifacts } = await queue.listLatestArtifacts(task.taskId);\n\n  // Default to downloading the build archive for our os.\n  let os = options.os;\n  let product = options.product;\n  let suffix = !!options.fileSuffix ?\n    options.fileSuffix :\n    buildinfo.archiveFileSuffix(product, os);\n\n  // Filter through namespace artifacts.\n  let artifact = artifacts.find(art => art.name.indexOf(suffix) !== -1);\n  if (!artifact) {\n    return Promise.reject(new Error('Could not find appropriate artifact'));\n  }\n\n  // Url for build is\n  // https://queue.taskcluster.net/v1/task/{taskId}/artifacts/{artifact}\n  return format({\n    protocol: 'https',\n    host: 'queue.taskcluster.net',\n    pathname: '/v1/task/' + task.taskId + '/artifacts/' + artifact.name\n  });\n}\n"]}