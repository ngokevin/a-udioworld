{"version":3,"sources":["../src/download.js"],"names":[],"mappings":";;;;iBAQ8B,QAAQ;;IAR/B,KAAK,2BAAM,OAAO;;IAClB,EAAE,2BAAM,IAAI;;IACV,QAAQ,WAAQ,QAAQ,EAAxB,QAAQ;;IACV,OAAO,2BAAM,SAAS;;IACpB,QAAQ,WAAQ,QAAQ,EAAxB,QAAQ;;AAEjB,KAAK,GAAG,KAAK,CAAC,2BAA2B,CAAC,CAAC;;AAE5B,SAAe,QAAQ,CAAC,GAAG,EAAE,OAAO;MAC7C,IAAI,EAEJ,GAAG,EACH,MAAM;;;;;eAHO,QAAQ,CAAC,EAAE,MAAM,EAAE,mBAAmB,GAAG,OAAO,CAAC,EAAE,EAAE,CAAC;;;AAAnE,YAAI;;AACR,aAAK,CAAC,wCAAwC,EAAE,IAAI,CAAC,CAAC;AAClD,WAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AACtB,cAAM,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;;eACjC,oBAAoB,CAAC,GAAG,EAAE,MAAM,CAAC;;;4CAChC,IAAI;;;;;;;CACZ;;AAED,SAAS,oBAAoB,CAAC,GAAG,EAAE,MAAM,EAAE;AACzC,SAAO,IAAI,OAAO,CAAC,UAAC,MAAM,EAAE,MAAM,EAAK;AACrC,OAAG,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AACxB,UAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC3B,OAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACjB,QAAI,MAAM,GAAG,QAAQ,CAAC;aAAM,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;KAAA,EAAE,IAAI,CAAC,CAAC;AAC7D,OAAG,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACvB,UAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,YAAM;AACxB,SAAG,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACnC,aAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC3B,YAAM,EAAE,CAAC;KACV,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ","file":"src/download.js","sourcesContent":["import debug from 'debug';\nimport fs from 'fs';\nimport { throttle } from 'lodash';\nimport request from 'request';\nimport { tempfile } from './temp';\n\ndebug = debug('mozilla-download/download');\n\nexport default async function download(url, options) {\n  let path = await tempfile({ prefix: 'mozilla-download-' + options.os });\n  debug('Will open http connection, download to', path);\n  let get = request.get(url);\n  let stream = fs.createWriteStream(path);\n  await pipeResponseToStream(get, stream);\n  return path;\n}\n\nfunction pipeResponseToStream(req, stream) {\n  return new Promise((accept, reject) => {\n    req.on('error', reject);\n    stream.on('error', reject);\n    req.pipe(stream);\n    let ondata = throttle(() => process.stdout.write('.'), 1000);\n    req.on('data', ondata);\n    stream.on('finish', () => {\n      req.removeListener('data', ondata);\n      process.stdout.write('\\n');\n      accept();\n    });\n  });\n}\n"]}