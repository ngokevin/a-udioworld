{"version":3,"sources":["../src/extract.js"],"names":[],"mappings":";;;;;;;;;;;;;;QA2BsB,OAAO,GAAP,OAAO;;;;;IA3BtB,OAAO,2BAAM,SAAS;;IACtB,GAAG,2BAAM,KAAK;;IACZ,IAAI,WAAQ,kBAAkB,EAA9B,IAAI;;IACN,EAAE,2BAAM,IAAI;;IACV,GAAG,WAAQ,KAAK,EAAhB,GAAG;;IACH,OAAO,WAAQ,QAAQ,EAAvB,OAAO;;AAEhB,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACzC,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC7C,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;;AAEtB,IAAI,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC;AACxC,eAAa,EAAE,KAAK;AACpB,WAAW,SAAS;AACpB,SAAS,SAAS;CACnB,CAAC,CAAC,QAJQ,cAAc,GAAd,cAAc;;AAgBlB,SAAe,OAAO,CAAC,OAAO;MAC/B,IAAI,EACJ,IAAI;;;;AADJ,YAAI,GAAG,OAAO,CAAC,IAAI;;eACN,OAAO,EAAE;;;AAAtB,YAAI;;;AAER,eAAO,CAAC,IAAI,GAAG,IAAI,CAAC;yBACZ,OAAO,CAAC,QAAQ;8CACjB,KAAK,0BAGL,QAAQ,2BACR,SAAS,2BAGT,KAAK;;;;;eANF,UAAU,CAAC,OAAO,CAAC;;;;;;;eAInB,cAAc,CAAC,OAAO,CAAC;;;;;;;eAGvB,cAAc,CAAC,OAAO,CAAC;;;;;;;AAI7B,eAAO,CAAC,IAAI,GAAG,IAAI,CAAC;;;;;eAKlB,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;;;;;;;CAC9B;;AAED,SAAe,UAAU,CAAC,OAAO;MAC3B,IAAI,EACJ,KAAK,EACL,MAAM,EACN,MAAM,EACN,IAAI;;;;;eAJS,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;;;AAAtC,YAAI;AACJ,aAAK,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;AAC5B,cAAM,GAAG,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI;iBAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;SAAA,CAAC;AAC/C,cAAM,GAAG,IAAI,GAAG,GAAG,GAAG,MAAM;AAC5B,YAAI,GAAG,OAAO,CAAC,IAAI,GAAG,GAAG,GAAG,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC;;AAC/D,UAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;eACb,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC;;;;eACjB,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;;;;;;;CACxB;;AAED,SAAS,cAAc,CAAC,OAAO,EAAE;AAC/B,SAAO,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;CAC3E;;AAED,SAAS,cAAc,CAAC,OAAO,EAAE;AAC/B,SAAO,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;CACtE","file":"src/extract.js","sourcesContent":["import Promise from 'promise';\nimport dmg from 'dmg';\nimport { exec } from 'mz/child_process';\nimport fs from 'fs';\nimport { ncp } from 'ncp';\nimport { tempdir } from './temp';\n\ndmg.mount = Promise.denodeify(dmg.mount);\ndmg.unmount = Promise.denodeify(dmg.unmount);\nncp = Promise.denodeify(ncp);\n\nexport let productDirname = Object.freeze({\n  'b2g-desktop': 'b2g',\n  'firefox': 'firefox',\n  'mulet': 'firefox'\n});\n\n/**\n * @fileoverview Extracts firefox or b2g runtime from a compressed format.\n *\n * Options:\n *\n *   (String) product\n *   (String) filetype\n *   (String) source\n *   (String) dest\n */\nexport async function extract(options) {\n  let dest = options.dest;\n  let path = await tempdir();\n  // Extract to temporary location.\n  options.dest = path;\n  switch (options.filetype) {\n    case 'dmg':\n      await extractDmg(options);\n      break;\n    case 'tar.gz':\n    case 'tar.bz2':\n      await extractTarball(options);\n      break;\n    case 'zip':\n      await extractZipball(options);\n      break;\n    default:\n      // Default to no extraction if we don't understand filetype.\n      options.dest = dest;\n      break;\n  }\n\n  // Copy to destination.\n  await ncp(options.dest, dest);\n}\n\nasync function extractDmg(options) {\n  let path = await dmg.mount(options.source);\n  let files = fs.readdirSync(path);\n  let target = files.find(file => /\\.app/.test(file));\n  let source = path + '/' + target;\n  let dest = options.dest + '/' + productDirname[options.product];\n  fs.mkdirSync(dest);\n  await ncp(source, dest);\n  await dmg.unmount(path);\n}\n\nfunction extractTarball(options) {\n  return exec(['tar', '-xf', options.source, '-C', options.dest].join(' '));\n}\n\nfunction extractZipball(options) {\n  return exec(['unzip', options.source, '-d', options.dest].join(' '));\n}\n"]}