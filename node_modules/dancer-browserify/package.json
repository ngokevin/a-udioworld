{
  "name": "dancer-browserify",
  "description": "dancer.js is a high-level audio API, usable with the Web Audio API, Mozilla's Audio Data API and flash fallback, designed to make sweet visualizations.",
  "version": "0.5.0",
  "homepage": "https://github.com/jsantell/dancer.js",
  "author": {
    "name": "Jordan Santell",
    "url": "http://jsantell.com"
  },
  "scripts": {
    "build": "webpack",
    "watch": "webpack --watch"
  },
  "main": "dist/dancer.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jsantell/dancer.js.git"
  },
  "bugs": {
    "url": "https://github.com/jsantell/dancer.js/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jsantell/dancer.js/blob/master/LICENSE"
    }
  ],
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-core": "^5.8.24",
    "babel-loader": "^5.3.2",
    "babel-runtime": "^5.8.24",
    "webpack": "^1.12.1"
  },
  "dependencies": {
    "flash-detect": "^1.1.1",
    "soundmanager2": "^2.97.20150601"
  },
  "readme": "# dancer.js\n\ndancer.js is a high-level audio API, usable with both Mozilla's Audio Data API\nand Web Audio API with flash fallback, designed to make sweet visualizations.\n\nhttp://jsantell.github.com/dancer.js\n\n_v0.5.0 (9/12/2015)_\n\n## Features\n\n* Use real-time audio waveform and frequency data and map it to any arbitrary\n  visualization\n* Use Dancer to get audio data from any preexisting audio source\n* Leverage kick detection into your visualizations\n* Simple API to time callbacks and events to any section of a song\n* Supports Web Audio (webkit/mozilla), Audio Data (mozilla) and flash\n  fallback (v9+)\n* Extensible framework supporting plugins and custom behaviours\n\n## Dancer Instance Methods\n\n### Setup\n\n* `load( source )` specifies the audio source for the dancer instance. `source`\ncan either be an audio element, or an object with a `src` property and an\noptional `codecs` array. While the audio element source is recommended to use\nwith other players, if you specify a config object, the `src` property can\neither be a string of the audio path, or a string of the audio path, without\nthe file extension, if you specify a codec array to work across multiple audio\nimplementations. Examples of input:\n\n```js\n  import Dancer from 'dancer';\n\n  const dancer = new Dancer();\n\n  // Using an audio object.\n  const a = new Audio();\n  a.src = 'somesong.mp3';\n  dancer.load(a);\n\n  // Using an audio element on the page.\n  dancer.load( document.getElementsByTagName('audio')[0]);\n\n  // Using a config object and you only have one encoding.\n  dancer.load({\n    src: 'somesong.mp3'\n  });\n\n  // Using a config object, and you have an ogg and mp3 version.\n  dancer.load({\n    src: 'somesong',\n    codecs: ['ogg', 'mp3']\n  });\n```\n\n### Controls\n\nAll controls return `this`. If provided an audio element as the source, one can\nalso control the audio through that, or can access the audio element in the\n`audio` property on the dancer instance.\n\n* `play()` plays the audio and begins the dance.\n* `pause()` pauses the madness.\n* `setVolume()` sets the player's current volume.\n\n### Getters\n\nNote in v0.5.0: most of these properties are accessible directly on a\n```dancer``` instance (e.g., ```dancer.volume```) as a result of porting to\nES6 Classes.\n\n* `getVolume()` returns a normalized value (0 to 1) of the current volume.\n* `getTime()` returns the current time.\n* `getProgress()` returns the downloading progress as a float from 0 to 1.\n* `getWaveform()` returns the waveform data array (Float32Array(1024))\n* `getSpectrum()` returns the frequency data array (Float32Array(512)).\n* `getFrequency( freq [, endFreq ] )` returns the magnitude of a frequency or\n  average over a range of frequencies.\n* `isLoaded()` returns a boolean value for the dancer instance's song load state.\n* `isPlaying()` returns a boolean value indicating whether the dancer\n  instance's song is currently playing or not.\n\n### Sections\n\nAll section methods return `this` (CHAIN IT UP) and callbacks executed with\n`this` referencing the dancer instance.\n\n* `after( t, callback )` fires callback on every frame after time `t`.\n* `before( t, callback )` fires callback on every frame before time `t`.\n* `between( t0, t1, callback )` fires callback on every frame between time `t0`\n  and `t1`.\n* `onceAt( t, callback )` fires callback once at time `t`.\n\n### Bindings\n\nBasic pub/sub to tie into the dancer instance. `update` and `loaded` are\npredefined events called within the framework that are published on every frame\n(update) and on audio file load (loaded). All callbacks executed with `this`\nreferencing the dancer instance.\n\n* `bind(name, callback)` subscribes a callback of `name`. Can call this method\n  several times to bind several callbacks of the same name.\n* `unbind(name)` unsubscribes all callbacks of `name`.\n* `trigger(name)` calls all callbacks of `name`.\n\n### Kick\n\nKicks are detected when the amplitude (normalized values between 0 and 1) of a\nspecified frequency, or the max amplitude over a range, is greater than the\nminimum threshold, as well as greater than the previously registered kick's\namplitude, which is decreased by the decay rate per frame.\n\n* `createKick( options )` creates a new kick instance tied to the dancer\n  instance, with an options object passed as an argument. Options listed below.\n  * `frequency` the frequency (element of the spectrum) to check for a spike.\n    Can be a single frequency (number) or a range (2 element array) that uses\n    the frequency with highest amplitude. Default: `[ 0, 10 ]`\n  * `threshold` the minimum amplitude of the frequency range in order for a\n    kick to occur. Default: `0.3`\n  * `decay` the rate that the previously registered kick's amplitude is reduced\n    by on every frame. Default: `0.02`\n  * `onKick` the callback to be called when a kick is detected.\n  * `offKick` the callback to be called when there is no kick on the current\n    frame.\n\n\n## Dancer Static Methods\n\n* `addPlugin( name, fn )` registers a plugin of `name` with initiation\n  function `fn` -- described in more detail below\n* `isSupported()` returns a string of `webaudio`, `audiodata` or `flash`\n  indicating level of support. Returns an empty string if the browser doesn't\n  support any of the methods. Can also return `null` when browser does not\n  support typed arrays.\n* `canPlay( type )` returns either `true` or `false` indicating whether the\n  browser supports playing back audio of type `type`, which can be a string of\n  `'mp3'`, `'ogg'`, `'wav'`, or `'aac'`.\n* `setOptions( options )` takes a set of key-value pairs in an object for\n  options. Options below.\n* `version` not a method, but a property of the Dancer object to return a\n  string of the current Dancer version.\n\n### Dancer Options\n\n* `flashSWF` The path to soundmanager2.swf. Required for flash fallback.\n* `flashJS` The path to soundmanager2.js. Required for flash fallback.\n\n\n## Kick Instance Methods\n\nThese methods can be called on a kick instance to turn on and off the\nregistered callbacks.\n\n* `on()` turns on the kick instance's callbacks and detections.\n* `off()` turns off the kick instance's callbacks and detections.\n* `set( options )` can pass in an object literal with the 5 kick options,\n  similar to creating a new kick option.\n\n\n## Example\n\nFor simple examples, check out the `examples/` folder -- both the FFT and\nwaveform examples are straight forward, leveraging the corresponding plugins\nfor visualizations.\n\n```js\n  import Dancer from 'dancer';\n\n  // To enable flash fallback, specify the paths for the flashSWF and flashJS.\n  Dancer.setOptions({\n    flashJS  : '../../lib/soundmanager2.js',\n    flashSWF : '../../lib/soundmanager2.swf'\n  });\n\n  const audio  = document.getElementsByTagName('audio')[0],\n  const dancer = new Dancer(),\n  const kick = dancer.createKick({\n    onKick: function(mag) {\n      console.log('Kick!');\n    },\n    offKick: function(mag) {\n      console.log('no kick :(');\n    }\n  });\n\n  // Let's turn this kick on right away.\n  kick.on();\n\n  dancer.onceAt(10, function() {\n    // Let's set up some things once at 10 seconds.\n  }).between(10, 60, function() {\n    // After 10s, let's do something on every frame for the first minute.\n  }).after(60, function() {\n    // After 60s, let's get this real and map a frequency to an object's y\n    // position.\n    // Note that the instance of dancer is bound to \"this\".\n    object.y = this.getFrequency(400);\n  }).onceAt(120, function() {\n    // After 120s, we'll turn the kick off as another object's y position is\n    // still being mapped from the previous \"after\" method.\n    kick.off();\n  }).load(audio); // And finally, lets pass in our Audio element to load.\n\n  dancer.play();\n```\n\n## Requirements\n\n\n**HTML5 Playback with Web Audio or Audio Data** Chrome and Firefox are both\nsupported out of the box -- other browsers will need to leverage the flash\nfallback until either of these APIs are implemented.\n\n**Safari 6 Web Audio API** While Safari 6 does have the Web Audio API, it\ndoesn't currently support processing audio from a media element source. Falls\nback to flash.\n\n**To enable flash** You must set Dancer's defaults for `flashSWF` with the path\nto the `soundmanager2.swf` and `flashJS` to the path to `soundmanager2.js`,\nboth found in `lib/`. Flash player 9 is required, and you must provide an mp3\noption. Waveform data in Flash is a 1024 Float32Array, but only the first 512\nelements have values due to flash's computeSpectrum method.\n\n**Uint32Array and Float32Array are required** Include a shim if you'd like to\nsupport browsers that do not have these typed arrays.\n\n\n## Dependencies\n\n* [dsp.js](https://github.com/corbanbrook/dsp.js/) - A subset of dsp.js (fft)\n  is used for Fast Fourier Transformations (included in packaged Dancer).\n* [flash_detect](http://www.featureblend.com/javascript-flash-detection-library.html) -\n  flash detect is used for immediate flash detection\n  (included in packaged Dancer).\n* [soundmanager2](https://github.com/scottschiller/SoundManager2) -\n  soundmanager2 is used for flash fallback\n  (found in `lib/`, asynchronously loaded).\n\n\n## Extending/Plugins\n\nYou can extend the Dancer prototype by calling the static method `addPlugin(\nname, fn )`, which extends the Dancer prototype. A Dancer instance then can\ncall the function provided in its context and subscribe to a preexisting event\nlike `update`, or make your own. Look in the `plugins/` directory for examples.\n\n\n## Development\n\n### Builds\n\ndancer.js uses [webpack](http://webpack.github.io/) to build.\n\n```bash\nnpm run build\n```\n\n### Testing\n\ndancer.js uses [jasmine](http://pivotal.github.com/jasmine/) for testing.  A\nCLI for testing would be awesome, but Mozilla and WebKit implementations differ\ngreatly. Go to `spec/index.html` in Mozilla/WebKit browsers to test. All tests\nshould pass in Chrome and Firefox (95% of the time) -- Flash implementations\nare much more annoying, need to have cleaned up tests.\n\n\n## Change Logs\n\n**v0.5.0 (1/28/2014)**\n* Browserify support.\n\n**v0.4.0 (1/28/2014)**\n* Update to work with new Web Audio function names. Dancer now uses Web Audio\n  in Firefox 25+.\n\n**v0.3.2 (9/29/2012)**\n* Change build process to using grunt.js\n\n**v0.3.1 (8/13/2012)**\n* Renamed `beat` to `kick` for future, true kick-detection\n* Added `getProgress()` to track progress of downloaded audio file (#20)\n* Added `setVolume()` and `getVolume()` as instance methods (#21)\n* Added `set()` method to `kick` instance (#16), fixed ability to assign 0 to a\n  `kick` attribute\n\n**v0.3.0 (8/9/2012)**\n\n* Added ability to provide an audio element as a source -- can control audio\n  via the element, or accessed through instance's `audio` property, or through\n  Dancer's helper controls (`play`, `pause`)\n* Pulled out loading from the constructor to the instance method `load`. Can\n  use the above mentioned audio element, or a config object with path\n  information.\n* Changed instance method `stop` to `pause`, to be more in line with audio\n  elements\n* Added example of using the audio element in `examples/audio\\_element`.\n\n**v0.2.1 (6/16/2012)**\n\n* Added getWaveform() method and a corresponding visualization for waveforms\n\n**v0.2.0 (6/14/2012)**\n\n* Added flash support with soundmanager2 -- flash_detect now included in build\n* Added static methods `isSupported`, `canPlay` and `setOptions`\n* Added multiple audio codecs support (#7)\n* Added a new simple FFT examples, both examples having feature detection and\n  controls (#10)\n* Fixed several Webkit bugs (#4, #8)\n\n**v0.1.0 (6/3/2012)**\n\n* Initial Web Audio/ Audio Data release\n",
  "readmeFilename": "README.md",
  "gitHead": "4f35f6003264571fb13c25dec30ee4856bbd56d9",
  "_id": "dancer-browserify@0.5.0",
  "_shasum": "39f42fbf5fd877b6ff31341a4c317772094c5d7e",
  "_from": "dancer-browserify@>=0.5.0 <0.6.0"
}
